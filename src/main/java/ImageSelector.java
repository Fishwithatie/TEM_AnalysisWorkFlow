import ij.IJ;
import ij.ImagePlus;
import ij.gui.YesNoCancelDialog;
import ij.plugin.frame.RoiManager;

import javafx.stage.FileChooser;
import javafx.stage.Stage;

import org.apache.poi.ss.usermodel.Row;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;

public class ImageSelector {

    Logger LOG = LoggerFactory.getLogger(ImageSelector.class);
    // TODO: 2016-03-24 Add support for multiple varicosities on 1 image

    /**
     * Goes through image list in order to measure images one at a time
     * <p>
     *     Image list is generated by the private setImages method
     * </p>
     * @param projectFile Current projectFile
     * @param mainStage mainStage of the JavaFX application
     */

    public void openImages(ProjectFile projectFile, Stage mainStage) {

        ArrayList<String> filenameList = new ArrayList<String>();

        for (Row row : projectFile.getCurrentSheet()) {
            if (row.getCell(0).getStringCellValue() != null) {
                filenameList.add(row.getCell(0).getStringCellValue());
                LOG.info("Filename from selected projectFile successfully loaded");
            }
        }

        java.util.List<File> imageList = setImages(mainStage);

        for (File imageit : imageList) {

            //Open image
            Path imagePath = imageit.toPath();
            ImagePlus currentImage = IJ.openImage(imagePath.toString());
            currentImage.show();

            //Ask if there is any labeling on the current image and proceed to measurements if true
            if (askLabeled() && checkDuplicata(filenameList, imageit)) {

                //Measurements
                MeasurementWorkflow workflow = new MeasurementWorkflow();
                workflow.processImage(currentImage, imageit, projectFile);

                //ImageCloner is created to keep a copy of images with overlays
                ImageCloner imageCloner = new ImageCloner();

                //Close image and save copy
                imageCloner.saveImageCopy(currentImage, imageit, projectFile);
                currentImage.hide();
                currentImage.flush();
                LOG.info(imageit.getName() + " successfully measured!");
                filenameList.add(imageit.getName());
                projectFile.saveFile(mainStage);
            } else {
                currentImage.hide();
                currentImage.flush();
            }
        }
    }

    //Select images in a folder and return a list of selected files
    private java.util.List<File> setImages(Stage mainStage) {

        FileChooser imageSelector = new FileChooser();
        FileChooser.ExtensionFilter imageFilter = new FileChooser.ExtensionFilter("Image file only (*.tif)", "*.tif");

        imageSelector.getExtensionFilters().add(imageFilter);
        return imageSelector.showOpenMultipleDialog(mainStage);
    }

    //Return false if current image is already in the filename list
    private boolean checkDuplicata(ArrayList<String> filenameList, File imageit) {

        if (filenameList.contains(imageit.getName())) {
            YesNoCancelDialog duplicataDialog = new YesNoCancelDialog(new Frame(), "Image already in measured", "are you sure you want to measure it again?");
            duplicataDialog.setAlwaysOnTop(true);
            return duplicataDialog.yesPressed();

        } else {
            return false;
        }
    }

    //Ask if there is a labeled varicosity
    private boolean askLabeled() {
        YesNoCancelDialog labeledDialog = new YesNoCancelDialog(new Frame(), "Labeled?", "Is there any labeled varicosities on the image (If no image appear please click NO)");
        labeledDialog.setAlwaysOnTop(true);
        return labeledDialog.yesPressed();
    }

}
